pipeline {
    agent any
    
    tools {
        nodejs '10.5.0'
    }

    environment {
        // Define any environment variables needed
        DOCKER_IMAGE = 'thenusan/calculator-app-pp:v1.0'
        SONARQUBE_SERVER = 'http://sonarqube-server:9000' // Update with your SonarQube server URL
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'dev', url: 'https://github.com/sthenusan/prof_hd.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('Build') {
            steps {
                sh 'npm run build'
            }
        }

        stage('Test') {
            steps {
                    sh './jenkins/scripts/deliver.sh'
                    sh './jenkins/scripts/kill.sh'
            }
        }

        // stage('Code Quality Analysis') {
        //     steps {
        //         withSonarQubeEnv('MySonarQubeServer') {
        //             sh 'sonar-scanner'
        //         }
        //     }
        // }

        stage('Deploy to Test Environment') {
            steps {
                script {
                    sh 'echo "version: \'3\'\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n" > docker-compose.yml'
                    sh 'docker-compose down' // Ensure any existing containers are stopped
                    sh 'docker-compose up -d --build'
                    sleep time: 30, unit: 'SECONDS' // Wait for the server to start
                }
            }
        }

        stage('Monitoring and Alerting') {
            steps {
                script {
                    // Example alerting script (replace with your custom logic)
                    def response = sh(script: 'curl -s http://localhost:3000/health', returnStatus: true)
                    if (response != 0) {
                        error 'Health check failed!'
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Stop the Node.js server if it's running
                sh 'docker-compose down'
            }
            cleanWs()
        }

        success {
            echo 'Build succeeded!'
        }

        failure {
            echo 'Build failed!'
        }
    }
}
